data "aws_iam_policy_document" "orca_security_view_only_extras_policy" {
  statement {
    sid    = "AllowViewOnly"
    effect = "Allow"
    actions = [
      "access-analyzer:ListAnalyzers",
      "acm:DescribeCertificate",
      "acm:GetCertificate",
      "apigateway:GET",
      "application-autoscaling:Describe*",
      "appsync:Get*",
      "appsync:List*",
      "autoscaling-plans:Describe*",
      "backup:Get*",
      "backup:List*",
      "cassandra:Select",
      "cloudfront:Get*",
      "cloudhsm:DescribeClusters",
      "cloudtrail:Describe*",
      "cloudtrail:Get*",
      "cloudtrail:List*",
      "cloudwatch:Describe*",
      "codebuild:BatchGet*",
      "codebuild:List*",
      "config:Get*",
      "dlm:Get*",
      "dms:Describe*",
      "dynamodb:Describe*",
      "dynamodb:List*",
      "ec2:Describe*",
      "ec2:GetEbsEncryptionByDefault",
      "ec2:List*",
      "ec2:SearchTransitGatewayRoutes",
      "ecr:BatchGetImage",
      "ecr:Describe*",
      "ecr:Get*",
      "ecr:List*",
      "eks:Describe*",
      "eks:List*",
      "elasticache:Describe*",
      "elasticfilesystem:Describe*",
      "elasticfilesystem:List*",
      "elasticloadbalancing:Describe*",
      "es:Describe*",
      "es:List*",
      "events:List*",
      "glacier:Describe*",
      "glacier:Get*",
      "globalaccelerator:List*",
      "glue:GetDataCatalogEncryptionSettings",
      "glue:GetDatabases",
      "glue:GetDevEndpoints",
      "glue:GetResourcePolicy",
      "glue:GetSecurityConfigurations",
      "guardduty:Get*",
      "guardduty:List*",
      "iam:Generate*",
      "iam:Get*",
      "iam:Simulate*",
      "kafka:Describe*",
      "kafka:List*",
      "kms:Describe*",
      "kms:Get*",
      "kms:List*",
      "lakeformation:GetDataLakeSettings",
      "lakeformation:GetEffectivePermissionsForPath",
      "lakeformation:ListResources",
      "lambda:Get*",
      "logs:FilterLogEvents",
      "logs:Get*",
      "logs:ListTagsLogGroup",
      "logs:StartQuery",
      "logs:TestMetricFilter",
      "memorydb:Describe*",
      "memorydb:List*",
      "mq:Describe*",
      "mq:List*",
      "organizations:Describe*",
      "qldb:DescribeLedger",
      "qldb:ListLedgers",
      "rds:List*",
      "redshift:Describe*",
      "resource-groups:Get*",
      "resource-groups:List*",
      "resource-groups:Search*",
      "route53:Test*",
      "route53domains:Check*",
      "route53domains:Get*",
      "route53domains:View*",
      "s3:Get*",
      "s3:List*",
      "secretsmanager:Describe*",
      "secretsmanager:GetResourcePolicy",
      "secretsmanager:List*",
      "serverlessrepo:Get*",
      "serverlessrepo:List*",
      "ses:GetIdentityDkimAttributes",
      "ses:GetIdentityPolicies",
      "ses:GetIdentityVerificationAttributes",
      "sns:Get*",
      "sqs:GetQueueAttributes",
      "sqs:ListQueueTags",
      "ssm:Describe*",
      "ssm:GetParameter*",
      "ssm:GetParametersByPath",
      "ssm:List*",
      "sso:DescribePermissionSet",
      "sso:GetInlinePolicyForPermissionSet",
      "sso:ListAccountAssignments",
      "sso:ListInstances",
      "sso:ListManagedPoliciesInPermissionSet",
      "sso:ListPermissionSets",
      "identitystore:DescribeGroup",
      "identitystore:DescribeUser",
      "identitystore:ListGroups",
      "identitystore:ListUsers",
      "tag:Get*",
      "waf-regional:Get*",
      "waf:Get*"
    ]
    resources = ["*"]
  }
}

module "orca_security_view_only_extras_policy" {
  source = "git::https://github.com/terraform-aws-modules/terraform-aws-iam.git//modules/iam-policy?ref=v5.2.0"

  name        = var.orca_security_view_only_extras_policy_name
  path        = var.iam_path
  description = "Orca Security Extras For View Only Policy"
  policy      = data.aws_iam_policy_document.orca_security_view_only_extras_policy.json

  tags = var.tags
}
